* Developer Notes

This document contains implementation notes
and considerations about the overall architecture
of the project, as well as goals and functional
requirements.

** An https server

This project is an implementation of a TCP + TLS
server accepting the http/1.1 protocol as defined
in RFC 2616, somewhat similar to the Apache web server.
A secondary goal for the project is to implement
a server-side rendering engine.

This project takes deliberate inspiration from two
well known web servers in the industry: Nginx and
Apache web server. Namely, the modular nature of
Apache and the high number of concurrent connections
provided by Nginx will guide the design of this
server.

** An UNIX server

The server will use UNIX sockets to handle multiple
TCP connections, using the OpenSSH library for TLS.
In Its first implementation, the server will create
a new UNIX thread for each connection. While this is
a simple and straight forward approach, It does not
scale to a high number of sessions as an UNIX thread
Is an expensive resource. Nginx uses a master-slave
architecture using a signal oriented design. This
approach is more sophisticated and requires greater
effort. The first implementation will leverage
on threads alone to handle the many sessions.

** SSR

The server-side-rendering module will parse .ssr
files, where code is delimited by the characters
"%{" to open and "}%" to close, as shown in the
following example:

#+BEGIN_SRC html
<body>
    %{ for(int i = 0; i < 10; ++i) { }%
        <p> Iteration No. %{ INT(i) }% </p>
    %{ } }%
</body>
#+END_SRC html
